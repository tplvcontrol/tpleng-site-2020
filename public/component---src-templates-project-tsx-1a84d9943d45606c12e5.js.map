{"version":3,"sources":["webpack:///./src/templates/project.tsx"],"names":["PBox","styled","AnimatedBox","Content","Box","props","transparentize","bg","theme","space","breakpoints","Category","fontSizes","Description","animated","div","PButton","Button","color","readableColor","Project","data","project","images","categoryAnimation","useSpring","config","slow","from","opacity","transform","to","titleAnimation","delay","descAnimation","imagesAnimation","pathname","slug","title","title_detail","desc","node","parent","banner","cover","childImageSharp","resize","src","individual","py","px","style","category","h1","dangerouslySetInnerHTML","__html","nodes","map","image","alt","name","key","fluid","textAlign","href","query"],"mappings":"0QAUMA,EAAOC,YAAOC,KAAV,gEAAGD,CAAH,qCAKJE,EACLF,YAAOG,KADK,mEACZH,CADY,+HAIS,SAACI,GAAD,OAAWC,YAAe,GAAKD,EAAME,OAGtC,SAACF,GAAD,OAAWA,EAAMG,MAAMC,MAAM,OAEzB,SAACJ,GAAD,OAAWA,EAAMG,MAAME,YAAY,MACrC,SAACL,GAAD,OAAWA,EAAMG,MAAMC,MAAM,MAK9CE,EAAWV,YAAOC,KAAV,oEAAGD,CAAH,mEAEC,SAACI,GAAD,OAAWA,EAAMG,MAAMI,UAAU,MAI1CC,EAAcZ,YAAOa,IAASC,KAAnB,uEAAGd,CAAH,sHAQXe,EACLf,YAAOgB,KADK,mEACZhB,CADY,+BAIG,SAACI,GAAD,MAA4B,UAAhBA,EAAMa,MAAoB,QAAUb,EAAMa,SAC3D,SAACb,GAAD,OAAWc,YAA8B,UAAhBd,EAAMa,MAAoB,QAAUb,EAAMa,UA8F/DE,UAnDqC,SAAC,GAAkC,QAAhCC,KAAQC,EAAwB,EAAxBA,QAASC,EAAe,EAAfA,OACjEC,EAAoBC,YAAU,CACnCC,OAAQA,IAAOC,KACfC,KAAM,CAAEC,QAAS,EAAGC,UAAW,4BAC/BC,GAAI,CAAEF,QAAS,EAAGC,UAAW,0BAGxBE,EAAiBP,YAAU,CAAEC,OAAQA,IAAOC,KAAMM,MAAO,IAAKL,KAAM,CAAEC,QAAS,GAAKE,GAAI,CAAEF,QAAS,KACnGK,EAAgBT,YAAU,CAAEC,OAAQA,IAAOC,KAAMM,MAAO,IAAKL,KAAM,CAAEC,QAAS,GAAKE,GAAI,CAAEF,QAAS,KAClGM,EAAkBV,YAAU,CAAEC,OAAQA,IAAOC,KAAMM,MAAO,IAAKL,KAAM,CAAEC,QAAS,GAAKE,GAAI,CAAEF,QAAS,KAE1G,OACC,kBAAC,IAAD,CAAQX,MAAOI,EAAQJ,OACtB,kBAAC,IAAD,CACCkB,SAAUd,EAAQe,KAClBC,MAAUhB,EAAQiB,aAAb,oBACLC,KAAMlB,EAAQkB,KACdC,KAAMnB,EAAQoB,OACdC,OAAQrB,EAAQsB,MAAMC,gBAAgBC,OAAOC,IAC7CC,YAAU,IAEX,kBAAChD,EAAD,CAAMiD,GAAI,GAAIC,GAAI,CAAE,EAAG,EAAG,EAAG,KAC5B,kBAACvC,EAAD,CAAUwC,MAAO3B,GAAoBF,EAAQ8B,UAC7C,kBAAC,IAASC,GAAV,CAAaF,MAAOnB,GAAiBV,EAAQiB,cAC7C,kBAAC1B,EAAD,CAAasC,MAAOjB,GACnB,yBAAKoB,wBAAyB,CAAEC,OAAQjC,EAAQkB,UAGlD,kBAACrC,EAAD,CAASI,GAAIe,EAAQJ,MAAO+B,GAAI,IAC/B,kBAACjD,EAAD,CAAMmD,MAAOhB,EAAiBe,GAAI,CAAE,EAAG,EAAG,EAAG,KAC3C3B,EAAOiC,MAAMC,KAAI,SAACC,GAAD,OACjB,kBAAC,IAAD,CACCC,IAAKD,EAAME,KACXC,IAAKH,EAAMb,gBAAgBiB,MAAMf,IACjCe,MAAOJ,EAAMb,gBAAgBiB,aAKjC,kBAAC9D,EAAD,CAAMmD,MAAO,CAAEY,UAAW,UAAYd,GAAI,GAAIC,GAAI,CAAE,EAAG,EAAG,EAAG,KAC5D,oDACA,uBAAGc,KAAK,yCACP,kBAAChD,EAAD,CAASE,MAAOI,EAAQJ,MAAO+B,GAAI,EAAGC,GAAI,GAA1C,oBAWE,IAAMe,EAAQ","file":"component---src-templates-project-tsx-1a84d9943d45606c12e5.js","sourcesContent":["import React from 'react';\r\nimport { graphql } from 'gatsby';\r\nimport Img from 'gatsby-image';\r\nimport { transparentize, readableColor } from 'polished';\r\nimport styled from 'styled-components';\r\nimport { config, useSpring, animated } from 'react-spring';\r\nimport Layout from '../components/layout';\r\nimport { Box, AnimatedBox, Button } from '../elements';\r\nimport SEO from '../components/SEO';\r\n\r\nconst PBox = styled(AnimatedBox)`\r\n  max-width: 1400px;\r\n  margin: 0 auto;\r\n`;\r\n\r\nconst Content =\r\n\tstyled(Box) <\r\n\t{ bg: string } >\r\n\t`\r\n  background-color: ${(props) => transparentize(0.9, props.bg)};\r\n\r\n  .gatsby-image-wrapper:not(:last-child) {\r\n    margin-bottom: ${(props) => props.theme.space[10]};\r\n\r\n    @media (max-width: ${(props) => props.theme.breakpoints[3]}) {\r\n      margin-bottom: ${(props) => props.theme.space[8]};\r\n    }\r\n  }\r\n`;\r\n\r\nconst Category = styled(AnimatedBox)`\r\n  letter-spacing: 0.05em;\r\n  font-size: ${(props) => props.theme.fontSizes[1]};\r\n  text-transform: uppercase;\r\n`;\r\n\r\nconst Description = styled(animated.div)`\r\n  max-width: 960px;\r\n  letter-spacing: -0.003em;\r\n  --baseline-multiplier: 0.179;\r\n  --x-height-multiplier: 0.35;\r\n  line-height: 1.58;\r\n`;\r\n\r\nconst PButton =\r\n\tstyled(Button) <\r\n\t{ color: string } >\r\n\t`\r\n  background: ${(props) => (props.color === 'white' ? 'black' : props.color)};\r\n  color: ${(props) => readableColor(props.color === 'white' ? 'black' : props.color)};\r\n`;\r\n\r\ntype PageProps = {\r\n\tdata: {\r\n\t\tproject: {\r\n\t\t\ttitle_detail: string;\r\n\t\t\tcolor: string;\r\n\t\t\tcategory: string;\r\n\t\t\tdesc: string;\r\n\t\t\tslug: string;\r\n\t\t\tparent: {\r\n\t\t\t\tmodifiedTime: string;\r\n\t\t\t\tbirthTime: string;\r\n\t\t\t};\r\n\t\t\tcover: {\r\n\t\t\t\tchildImageSharp: {\r\n\t\t\t\t\tresize: {\r\n\t\t\t\t\t\tsrc: string;\r\n\t\t\t\t\t};\r\n\t\t\t\t};\r\n\t\t\t};\r\n\t\t};\r\n\t\timages: {\r\n\t\t\tnodes: {\r\n\t\t\t\tname: string;\r\n\t\t\t\tchildImageSharp: {\r\n\t\t\t\t\tfluid: {\r\n\t\t\t\t\t\taspectRatio: number;\r\n\t\t\t\t\t\tsrc: string;\r\n\t\t\t\t\t\tsrcSet: string;\r\n\t\t\t\t\t\tsizes: string;\r\n\t\t\t\t\t\tbase64: string;\r\n\t\t\t\t\t\ttracedSVG: string;\r\n\t\t\t\t\t\tsrcWebp: string;\r\n\t\t\t\t\t\tsrcSetWebp: string;\r\n\t\t\t\t\t};\r\n\t\t\t\t};\r\n\t\t\t}[];\r\n\t\t};\r\n\t};\r\n};\r\n\r\nconst Project: React.FunctionComponent<PageProps> = ({ data: { project, images } }) => {\r\n\tconst categoryAnimation = useSpring({\r\n\t\tconfig: config.slow,\r\n\t\tfrom: { opacity: 0, transform: 'translate3d(0, -30px, 0)' },\r\n\t\tto: { opacity: 1, transform: 'translate3d(0, 0, 0)' }\r\n\t});\r\n\r\n\tconst titleAnimation = useSpring({ config: config.slow, delay: 300, from: { opacity: 0 }, to: { opacity: 1 } });\r\n\tconst descAnimation = useSpring({ config: config.slow, delay: 600, from: { opacity: 0 }, to: { opacity: 1 } });\r\n\tconst imagesAnimation = useSpring({ config: config.slow, delay: 800, from: { opacity: 0 }, to: { opacity: 1 } });\r\n\r\n\treturn (\r\n\t\t<Layout color={project.color}>\r\n\t\t\t<SEO\r\n\t\t\t\tpathname={project.slug}\r\n\t\t\t\ttitle={`${project.title_detail} | TPL Engenharia`}\r\n\t\t\t\tdesc={project.desc}\r\n\t\t\t\tnode={project.parent}\r\n\t\t\t\tbanner={project.cover.childImageSharp.resize.src}\r\n\t\t\t\tindividual\r\n\t\t\t/>\r\n\t\t\t<PBox py={10} px={[ 6, 6, 8, 10 ]}>\r\n\t\t\t\t<Category style={categoryAnimation}>{project.category}</Category>\r\n\t\t\t\t<animated.h1 style={titleAnimation}>{project.title_detail}</animated.h1>\r\n\t\t\t\t<Description style={descAnimation}>\r\n\t\t\t\t\t<div dangerouslySetInnerHTML={{ __html: project.desc }} />\r\n\t\t\t\t</Description>\r\n\t\t\t</PBox>\r\n\t\t\t<Content bg={project.color} py={10}>\r\n\t\t\t\t<PBox style={imagesAnimation} px={[ 6, 6, 8, 10 ]}>\r\n\t\t\t\t\t{images.nodes.map((image) => (\r\n\t\t\t\t\t\t<Img\r\n\t\t\t\t\t\t\talt={image.name}\r\n\t\t\t\t\t\t\tkey={image.childImageSharp.fluid.src}\r\n\t\t\t\t\t\t\tfluid={image.childImageSharp.fluid}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t))}\r\n\t\t\t\t</PBox>\r\n\t\t\t</Content>\r\n\t\t\t<PBox style={{ textAlign: 'center' }} py={10} px={[ 6, 6, 8, 10 ]}>\r\n\t\t\t\t<h2>Torne-se um cliente.</h2>\r\n\t\t\t\t<a href=\"mailto:comercial@tplengenharia.com.br\">\r\n\t\t\t\t\t<PButton color={project.color} py={4} px={8}>\r\n\t\t\t\t\t\tFale Conosco\r\n\t\t\t\t\t</PButton>\r\n\t\t\t\t</a>\r\n\t\t\t</PBox>\r\n\t\t</Layout>\r\n\t);\r\n};\r\n\r\nexport default Project;\r\n\r\nexport const query = graphql`\r\n\tquery ProjectTemplate($slug: String!, $images: String!) {\r\n\t\tproject: projectsYaml(slug: { eq: $slug }) {\r\n\t\t\ttitle_detail\r\n\t\t\tcolor\r\n\t\t\tcategory\r\n\t\t\tdesc\r\n\t\t\tslug\r\n\t\t\tparent {\r\n\t\t\t\t... on File {\r\n\t\t\t\t\tmodifiedTime\r\n\t\t\t\t\tbirthTime\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tcover {\r\n\t\t\t\tchildImageSharp {\r\n\t\t\t\t\tresize(width: 1200, height: 675, quality: 80) {\r\n\t\t\t\t\t\tsrc\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\timages: allFile(filter: { relativePath: { regex: $images } }, sort: { fields: name, order: ASC }) {\r\n\t\t\tnodes {\r\n\t\t\t\tname\r\n\t\t\t\tchildImageSharp {\r\n\t\t\t\t\tfluid(quality: 90, maxWidth: 1200) {\r\n\t\t\t\t\t\t...GatsbyImageSharpFluid_withWebp\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n`;\r\n"],"sourceRoot":""}